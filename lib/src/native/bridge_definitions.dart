// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';
import 'package:freezed_annotation/freezed_annotation.dart' hide protected;

part 'bridge_definitions.freezed.dart';

abstract class Native {
  Future<Platform> platform({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kPlatformConstMeta;

  Future<bool> rustReleaseMode({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta;

  Future<String> test({dynamic hint});

  FlutterRustBridgeTaskConstMeta get kTestConstMeta;

  Future<List<MaReturnTypes>> calculateSma({required int period, required List<RtDeviceVec> data, dynamic hint});

  FlutterRustBridgeTaskConstMeta get kCalculateSmaConstMeta;
}

@freezed
class DeviceVal with _$DeviceVal {
  const factory DeviceVal.single(
    double field0,
  ) = DeviceVal_Single;
  const factory DeviceVal.three(
    MultiVal field0,
  ) = DeviceVal_Three;
}

@freezed
class MaReturnTypes with _$MaReturnTypes {
  const factory MaReturnTypes.single(
    Float64List field0,
  ) = MaReturnTypes_Single;
  const factory MaReturnTypes.triple(
    TripleVec field0,
  ) = MaReturnTypes_Triple;
}

class MultiVal {
  final double nValue;
  final double pValue;
  final double kValue;

  const MultiVal({
    required this.nValue,
    required this.pValue,
    required this.kValue,
  });
}

enum Platform {
  Unknown,
  Android,
  Ios,
  Windows,
  Unix,
  MacIntel,
  MacApple,
  Wasm,
}

class RtDeviceVec {
  final String id;
  final String device;
  final String farm;
  final DeviceVal value;
  final String comment;

  const RtDeviceVec({
    required this.id,
    required this.device,
    required this.farm,
    required this.value,
    required this.comment,
  });
}

class TripleVec {
  final Float64List nVec;
  final Float64List pVec;
  final Float64List kVec;

  const TripleVec({
    required this.nVec,
    required this.pVec,
    required this.kVec,
  });
}
