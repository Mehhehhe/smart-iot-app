// AUTO GENERATED FILE, DO NOT EDIT.
// Generated by `flutter_rust_bridge`@ 1.72.2.
// ignore_for_file: non_constant_identifier_names, unused_element, duplicate_ignore, directives_ordering, curly_braces_in_flow_control_structures, unnecessary_lambdas, slash_for_doc_comments, prefer_const_literals_to_create_immutables, implicit_dynamic_list_literal, duplicate_import, unused_import, unnecessary_import, prefer_single_quotes, prefer_const_constructors, use_super_parameters, always_use_package_imports, annotate_overrides, invalid_use_of_protected_member, constant_identifier_names, invalid_use_of_internal_member, prefer_is_empty, unnecessary_const

import "bridge_definitions.dart";
import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:convert';
import 'dart:async';
import 'package:meta/meta.dart';
import 'package:flutter_rust_bridge/flutter_rust_bridge.dart';
import 'package:uuid/uuid.dart';

import 'dart:ffi' as ffi;

class NativeImpl implements Native {
  final NativePlatform _platform;
  factory NativeImpl(ExternalLibrary dylib) => NativeImpl.raw(NativePlatform(dylib));

  /// Only valid on web/WASM platforms.
  factory NativeImpl.wasm(FutureOr<WasmModule> module) => NativeImpl(module as ExternalLibrary);
  NativeImpl.raw(this._platform);
  Future<Platform> platform({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_platform(port_),
      parseSuccessData: _wire2api_platform,
      constMeta: kPlatformConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kPlatformConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "platform",
        argNames: [],
      );

  Future<bool> rustReleaseMode({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_rust_release_mode(port_),
      parseSuccessData: _wire2api_bool,
      constMeta: kRustReleaseModeConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kRustReleaseModeConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "rust_release_mode",
        argNames: [],
      );

  Future<String> test({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test(port_),
      parseSuccessData: _wire2api_String,
      constMeta: kTestConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test",
        argNames: [],
      );

  Future<void> testNeural({dynamic hint}) {
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_test_neural(port_),
      parseSuccessData: _wire2api_unit,
      constMeta: kTestNeuralConstMeta,
      argValues: [],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kTestNeuralConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "test_neural",
        argNames: [],
      );

  Future<List<MaReturnTypes>> calculateSma({required int period, required List<RtDeviceVec> data, dynamic hint}) {
    var arg0 = api2wire_usize(period);
    var arg1 = _platform.api2wire_list_rt_device_vec(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_calculate_sma(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_ma_return_types,
      constMeta: kCalculateSmaConstMeta,
      argValues: [
        period,
        data
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCalculateSmaConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "calculate_sma",
        argNames: [
          "period",
          "data"
        ],
      );

  Future<List<MaReturnTypes>> calculateEma({required int period, required List<RtDeviceVec> data, dynamic hint}) {
    var arg0 = api2wire_usize(period);
    var arg1 = _platform.api2wire_list_rt_device_vec(data);
    return _platform.executeNormal(FlutterRustBridgeTask(
      callFfi: (port_) => _platform.inner.wire_calculate_ema(port_, arg0, arg1),
      parseSuccessData: _wire2api_list_ma_return_types,
      constMeta: kCalculateEmaConstMeta,
      argValues: [
        period,
        data
      ],
      hint: hint,
    ));
  }

  FlutterRustBridgeTaskConstMeta get kCalculateEmaConstMeta => const FlutterRustBridgeTaskConstMeta(
        debugName: "calculate_ema",
        argNames: [
          "period",
          "data"
        ],
      );

  void dispose() {
    _platform.dispose();
  }
// Section: wire2api

  String _wire2api_String(dynamic raw) {
    return raw as String;
  }

  bool _wire2api_bool(dynamic raw) {
    return raw as bool;
  }

  TripleVec _wire2api_box_autoadd_triple_vec(dynamic raw) {
    return _wire2api_triple_vec(raw);
  }

  double _wire2api_f64(dynamic raw) {
    return raw as double;
  }

  Float64List _wire2api_float_64_list(dynamic raw) {
    return raw as Float64List;
  }

  int _wire2api_i32(dynamic raw) {
    return raw as int;
  }

  List<MaReturnTypes> _wire2api_list_ma_return_types(dynamic raw) {
    return (raw as List<dynamic>).map(_wire2api_ma_return_types).toList();
  }

  MaReturnTypes _wire2api_ma_return_types(dynamic raw) {
    switch (raw[0]) {
      case 0:
        return MaReturnTypes_Single(
          _wire2api_float_64_list(raw[1]),
        );
      case 1:
        return MaReturnTypes_Triple(
          _wire2api_box_autoadd_triple_vec(raw[1]),
        );
      default:
        throw Exception("unreachable");
    }
  }

  Platform _wire2api_platform(dynamic raw) {
    return Platform.values[raw];
  }

  TripleVec _wire2api_triple_vec(dynamic raw) {
    final arr = raw as List<dynamic>;
    if (arr.length != 3) throw Exception('unexpected arr length: expect 3 but see ${arr.length}');
    return TripleVec(
      nVec: _wire2api_float_64_list(arr[0]),
      pVec: _wire2api_float_64_list(arr[1]),
      kVec: _wire2api_float_64_list(arr[2]),
    );
  }

  int _wire2api_u8(dynamic raw) {
    return raw as int;
  }

  Uint8List _wire2api_uint_8_list(dynamic raw) {
    return raw as Uint8List;
  }

  void _wire2api_unit(dynamic raw) {
    return;
  }
}

// Section: api2wire

@protected
double api2wire_f64(double raw) {
  return raw;
}

@protected
int api2wire_u8(int raw) {
  return raw;
}

@protected
int api2wire_usize(int raw) {
  return raw;
}
// Section: finalizer

class NativePlatform extends FlutterRustBridgeBase<NativeWire> {
  NativePlatform(ffi.DynamicLibrary dylib) : super(NativeWire(dylib));

// Section: api2wire

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_String(String raw) {
    return api2wire_uint_8_list(utf8.encoder.convert(raw));
  }

  @protected
  ffi.Pointer<wire_MultiVal> api2wire_box_autoadd_multi_val(MultiVal raw) {
    final ptr = inner.new_box_autoadd_multi_val_0();
    _api_fill_to_wire_multi_val(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_DeviceVal> api2wire_box_device_val(DeviceVal raw) {
    final ptr = inner.new_box_device_val_0();
    _api_fill_to_wire_device_val(raw, ptr.ref);
    return ptr;
  }

  @protected
  ffi.Pointer<wire_list_rt_device_vec> api2wire_list_rt_device_vec(List<RtDeviceVec> raw) {
    final ans = inner.new_list_rt_device_vec_0(raw.length);
    for (var i = 0; i < raw.length; ++i) {
      _api_fill_to_wire_rt_device_vec(raw[i], ans.ref.ptr[i]);
    }
    return ans;
  }

  @protected
  ffi.Pointer<wire_uint_8_list> api2wire_uint_8_list(Uint8List raw) {
    final ans = inner.new_uint_8_list_0(raw.length);
    ans.ref.ptr.asTypedList(raw.length).setAll(0, raw);
    return ans;
  }

// Section: finalizer

// Section: api_fill_to_wire

  void _api_fill_to_wire_box_autoadd_multi_val(MultiVal apiObj, ffi.Pointer<wire_MultiVal> wireObj) {
    _api_fill_to_wire_multi_val(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_box_device_val(DeviceVal apiObj, ffi.Pointer<wire_DeviceVal> wireObj) {
    _api_fill_to_wire_device_val(apiObj, wireObj.ref);
  }

  void _api_fill_to_wire_device_val(DeviceVal apiObj, wire_DeviceVal wireObj) {
    if (apiObj is DeviceVal_Single) {
      var pre_field0 = api2wire_f64(apiObj.field0);
      wireObj.tag = 0;
      wireObj.kind = inner.inflate_DeviceVal_Single();
      wireObj.kind.ref.Single.ref.field0 = pre_field0;
      return;
    }
    if (apiObj is DeviceVal_Three) {
      var pre_field0 = api2wire_box_autoadd_multi_val(apiObj.field0);
      wireObj.tag = 1;
      wireObj.kind = inner.inflate_DeviceVal_Three();
      wireObj.kind.ref.Three.ref.field0 = pre_field0;
      return;
    }
  }

  void _api_fill_to_wire_multi_val(MultiVal apiObj, wire_MultiVal wireObj) {
    wireObj.n_value = api2wire_f64(apiObj.nValue);
    wireObj.p_value = api2wire_f64(apiObj.pValue);
    wireObj.k_value = api2wire_f64(apiObj.kValue);
  }

  void _api_fill_to_wire_rt_device_vec(RtDeviceVec apiObj, wire_RtDeviceVec wireObj) {
    wireObj.id = api2wire_String(apiObj.id);
    wireObj.device = api2wire_String(apiObj.device);
    wireObj.farm = api2wire_String(apiObj.farm);
    wireObj.value = api2wire_box_device_val(apiObj.value);
    wireObj.comment = api2wire_String(apiObj.comment);
  }
}

// ignore_for_file: camel_case_types, non_constant_identifier_names, avoid_positional_boolean_parameters, annotate_overrides, constant_identifier_names

// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
// ignore_for_file: type=lint

/// generated by flutter_rust_bridge
class NativeWire implements FlutterRustBridgeWireBase {
  @internal
  late final dartApi = DartApiDl(init_frb_dart_api_dl);

  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  NativeWire(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  NativeWire.fromLookup(ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName) lookup) : _lookup = lookup;

  void store_dart_post_cobject(
    DartPostCObjectFnType ptr,
  ) {
    return _store_dart_post_cobject(
      ptr,
    );
  }

  late final _store_dart_post_cobjectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(DartPostCObjectFnType)>>('store_dart_post_cobject');
  late final _store_dart_post_cobject = _store_dart_post_cobjectPtr.asFunction<void Function(DartPostCObjectFnType)>();

  Object get_dart_object(
    int ptr,
  ) {
    return _get_dart_object(
      ptr,
    );
  }

  late final _get_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Handle Function(ffi.UintPtr)>>('get_dart_object');
  late final _get_dart_object = _get_dart_objectPtr.asFunction<Object Function(int)>();

  void drop_dart_object(
    int ptr,
  ) {
    return _drop_dart_object(
      ptr,
    );
  }

  late final _drop_dart_objectPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UintPtr)>>('drop_dart_object');
  late final _drop_dart_object = _drop_dart_objectPtr.asFunction<void Function(int)>();

  int new_dart_opaque(
    Object handle,
  ) {
    return _new_dart_opaque(
      handle,
    );
  }

  late final _new_dart_opaquePtr = _lookup<ffi.NativeFunction<ffi.UintPtr Function(ffi.Handle)>>('new_dart_opaque');
  late final _new_dart_opaque = _new_dart_opaquePtr.asFunction<int Function(Object)>();

  int init_frb_dart_api_dl(
    ffi.Pointer<ffi.Void> obj,
  ) {
    return _init_frb_dart_api_dl(
      obj,
    );
  }

  late final _init_frb_dart_api_dlPtr = _lookup<ffi.NativeFunction<ffi.IntPtr Function(ffi.Pointer<ffi.Void>)>>('init_frb_dart_api_dl');
  late final _init_frb_dart_api_dl = _init_frb_dart_api_dlPtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  void wire_platform(
    int port_,
  ) {
    return _wire_platform(
      port_,
    );
  }

  late final _wire_platformPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_platform');
  late final _wire_platform = _wire_platformPtr.asFunction<void Function(int)>();

  void wire_rust_release_mode(
    int port_,
  ) {
    return _wire_rust_release_mode(
      port_,
    );
  }

  late final _wire_rust_release_modePtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_rust_release_mode');
  late final _wire_rust_release_mode = _wire_rust_release_modePtr.asFunction<void Function(int)>();

  void wire_test(
    int port_,
  ) {
    return _wire_test(
      port_,
    );
  }

  late final _wire_testPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test');
  late final _wire_test = _wire_testPtr.asFunction<void Function(int)>();

  void wire_test_neural(
    int port_,
  ) {
    return _wire_test_neural(
      port_,
    );
  }

  late final _wire_test_neuralPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64)>>('wire_test_neural');
  late final _wire_test_neural = _wire_test_neuralPtr.asFunction<void Function(int)>();

  void wire_calculate_sma(
    int port_,
    int period,
    ffi.Pointer<wire_list_rt_device_vec> data,
  ) {
    return _wire_calculate_sma(
      port_,
      period,
      data,
    );
  }

  late final _wire_calculate_smaPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr, ffi.Pointer<wire_list_rt_device_vec>)>>('wire_calculate_sma');
  late final _wire_calculate_sma = _wire_calculate_smaPtr.asFunction<void Function(int, int, ffi.Pointer<wire_list_rt_device_vec>)>();

  void wire_calculate_ema(
    int port_,
    int period,
    ffi.Pointer<wire_list_rt_device_vec> data,
  ) {
    return _wire_calculate_ema(
      port_,
      period,
      data,
    );
  }

  late final _wire_calculate_emaPtr = _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int64, ffi.UintPtr, ffi.Pointer<wire_list_rt_device_vec>)>>('wire_calculate_ema');
  late final _wire_calculate_ema = _wire_calculate_emaPtr.asFunction<void Function(int, int, ffi.Pointer<wire_list_rt_device_vec>)>();

  ffi.Pointer<wire_MultiVal> new_box_autoadd_multi_val_0() {
    return _new_box_autoadd_multi_val_0();
  }

  late final _new_box_autoadd_multi_val_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_MultiVal> Function()>>('new_box_autoadd_multi_val_0');
  late final _new_box_autoadd_multi_val_0 = _new_box_autoadd_multi_val_0Ptr.asFunction<ffi.Pointer<wire_MultiVal> Function()>();

  ffi.Pointer<wire_DeviceVal> new_box_device_val_0() {
    return _new_box_device_val_0();
  }

  late final _new_box_device_val_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_DeviceVal> Function()>>('new_box_device_val_0');
  late final _new_box_device_val_0 = _new_box_device_val_0Ptr.asFunction<ffi.Pointer<wire_DeviceVal> Function()>();

  ffi.Pointer<wire_list_rt_device_vec> new_list_rt_device_vec_0(
    int len,
  ) {
    return _new_list_rt_device_vec_0(
      len,
    );
  }

  late final _new_list_rt_device_vec_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_list_rt_device_vec> Function(ffi.Int32)>>('new_list_rt_device_vec_0');
  late final _new_list_rt_device_vec_0 = _new_list_rt_device_vec_0Ptr.asFunction<ffi.Pointer<wire_list_rt_device_vec> Function(int)>();

  ffi.Pointer<wire_uint_8_list> new_uint_8_list_0(
    int len,
  ) {
    return _new_uint_8_list_0(
      len,
    );
  }

  late final _new_uint_8_list_0Ptr = _lookup<ffi.NativeFunction<ffi.Pointer<wire_uint_8_list> Function(ffi.Int32)>>('new_uint_8_list_0');
  late final _new_uint_8_list_0 = _new_uint_8_list_0Ptr.asFunction<ffi.Pointer<wire_uint_8_list> Function(int)>();

  ffi.Pointer<DeviceValKind> inflate_DeviceVal_Single() {
    return _inflate_DeviceVal_Single();
  }

  late final _inflate_DeviceVal_SinglePtr = _lookup<ffi.NativeFunction<ffi.Pointer<DeviceValKind> Function()>>('inflate_DeviceVal_Single');
  late final _inflate_DeviceVal_Single = _inflate_DeviceVal_SinglePtr.asFunction<ffi.Pointer<DeviceValKind> Function()>();

  ffi.Pointer<DeviceValKind> inflate_DeviceVal_Three() {
    return _inflate_DeviceVal_Three();
  }

  late final _inflate_DeviceVal_ThreePtr = _lookup<ffi.NativeFunction<ffi.Pointer<DeviceValKind> Function()>>('inflate_DeviceVal_Three');
  late final _inflate_DeviceVal_Three = _inflate_DeviceVal_ThreePtr.asFunction<ffi.Pointer<DeviceValKind> Function()>();

  void free_WireSyncReturn(
    WireSyncReturn ptr,
  ) {
    return _free_WireSyncReturn(
      ptr,
    );
  }

  late final _free_WireSyncReturnPtr = _lookup<ffi.NativeFunction<ffi.Void Function(WireSyncReturn)>>('free_WireSyncReturn');
  late final _free_WireSyncReturn = _free_WireSyncReturnPtr.asFunction<void Function(WireSyncReturn)>();
}

class _Dart_Handle extends ffi.Opaque {}

class wire_uint_8_list extends ffi.Struct {
  external ffi.Pointer<ffi.Uint8> ptr;

  @ffi.Int32()
  external int len;
}

class wire_DeviceVal_Single extends ffi.Struct {
  @ffi.Double()
  external double field0;
}

class wire_MultiVal extends ffi.Struct {
  @ffi.Double()
  external double n_value;

  @ffi.Double()
  external double p_value;

  @ffi.Double()
  external double k_value;
}

class wire_DeviceVal_Three extends ffi.Struct {
  external ffi.Pointer<wire_MultiVal> field0;
}

class DeviceValKind extends ffi.Union {
  external ffi.Pointer<wire_DeviceVal_Single> Single;

  external ffi.Pointer<wire_DeviceVal_Three> Three;
}

class wire_DeviceVal extends ffi.Struct {
  @ffi.Int32()
  external int tag;

  external ffi.Pointer<DeviceValKind> kind;
}

class wire_RtDeviceVec extends ffi.Struct {
  external ffi.Pointer<wire_uint_8_list> id;

  external ffi.Pointer<wire_uint_8_list> device;

  external ffi.Pointer<wire_uint_8_list> farm;

  external ffi.Pointer<wire_DeviceVal> value;

  external ffi.Pointer<wire_uint_8_list> comment;
}

class wire_list_rt_device_vec extends ffi.Struct {
  external ffi.Pointer<wire_RtDeviceVec> ptr;

  @ffi.Int32()
  external int len;
}

typedef DartPostCObjectFnType = ffi.Pointer<ffi.NativeFunction<ffi.Bool Function(DartPort port_id, ffi.Pointer<ffi.Void> message)>>;
typedef DartPort = ffi.Int64;
