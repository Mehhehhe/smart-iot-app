{
  "service": {
    "service": "smart-iot-app",
    "serviceObject": {
      "name": "smart-iot-app"
    },
    "provider": {
      "name": "aws",
      "runtime": "nodejs14.x",
      "lambdaHashingVersion": "20201221",
      "stage": "dev",
      "region": "ap-southeast-1",
      "environment": {
        "FARM_TABLE": {
          "Ref": "FarmDynamoDbTable"
        },
        "FARM_USER_TABLE": {
          "Ref": "FarmUserDynamoDbTable"
        },
        "FARM_DEVICE_TABLE": {
          "Ref": "FarmDevicesDynamoDbTable"
        }
      },
      "iam": {
        "role": {
          "statements": [
            {
              "Effect": "Allow",
              "Action": [
                "s3:ListBucket"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "ServerlessDeploymentBucket"
                    }
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "s3:PutObject"
              ],
              "Resource": {
                "Fn::Join": [
                  "",
                  [
                    "arn:aws:s3:::",
                    {
                      "Ref": "ServerlessDeploymentBucket"
                    },
                    "/*"
                  ]
                ]
              }
            },
            {
              "Effect": "Allow",
              "Action": [
                "dynamodb:Query",
                "dynamodb:Scan",
                "dynamodb:GetItem",
                "dynamodb:PutItem"
              ],
              "Resource": [
                {
                  "Fn::GetAtt": [
                    "FarmDynamoDbTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "FarmUserDynamoDbTable",
                    "Arn"
                  ]
                },
                {
                  "Fn::GetAtt": [
                    "FarmDevicesDynamoDbTable",
                    "Arn"
                  ]
                }
              ]
            }
          ]
        }
      },
      "versionFunctions": true,
      "compiledCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          },
          "GetFarmExampleLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/smart-iot-app-dev-getFarmExample"
            }
          },
          "GetFarmListLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/smart-iot-app-dev-getFarmList"
            }
          },
          "GetFarmByIDLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/smart-iot-app-dev-getFarmByID"
            }
          },
          "CreateFarmLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/smart-iot-app-dev-createFarm"
            }
          },
          "CreateUserLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/smart-iot-app-dev-createUser"
            }
          },
          "CreateUserToTableLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/smart-iot-app-dev-createUserToTable"
            }
          },
          "GetUserListLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/smart-iot-app-dev-getUserList"
            }
          },
          "GetUserByIDLogGroup": {
            "Type": "AWS::Logs::LogGroup",
            "Properties": {
              "LogGroupName": "/aws/lambda/smart-iot-app-dev-getUserByID"
            }
          },
          "IamRoleLambdaExecution": {
            "Type": "AWS::IAM::Role",
            "Properties": {
              "AssumeRolePolicyDocument": {
                "Version": "2012-10-17",
                "Statement": [
                  {
                    "Effect": "Allow",
                    "Principal": {
                      "Service": [
                        "lambda.amazonaws.com"
                      ]
                    },
                    "Action": [
                      "sts:AssumeRole"
                    ]
                  }
                ]
              },
              "Policies": [
                {
                  "PolicyName": {
                    "Fn::Join": [
                      "-",
                      [
                        "smart-iot-app",
                        "dev",
                        "lambda"
                      ]
                    ]
                  },
                  "PolicyDocument": {
                    "Version": "2012-10-17",
                    "Statement": [
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:CreateLogStream",
                          "logs:CreateLogGroup"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/smart-iot-app-dev*:*"
                          }
                        ]
                      },
                      {
                        "Effect": "Allow",
                        "Action": [
                          "logs:PutLogEvents"
                        ],
                        "Resource": [
                          {
                            "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/smart-iot-app-dev*:*:*"
                          }
                        ]
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][0]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][1]"
                      },
                      {
                        "$ref": "$[\"service\"][\"provider\"][\"iam\"][\"role\"][\"statements\"][2]"
                      }
                    ]
                  }
                }
              ],
              "Path": "/",
              "RoleName": {
                "Fn::Join": [
                  "-",
                  [
                    "smart-iot-app",
                    "dev",
                    {
                      "Ref": "AWS::Region"
                    },
                    "lambdaRole"
                  ]
                ]
              }
            }
          },
          "GetFarmExampleLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/smart-iot-app/dev/1664704480004-2022-10-02T09:54:40.004Z/smart-iot-app.zip"
              },
              "Handler": "handler.getFarmExample",
              "Runtime": "nodejs14.x",
              "FunctionName": "smart-iot-app-dev-getFarmExample",
              "MemorySize": 1024,
              "Timeout": 6,
              "Environment": {
                "Variables": {
                  "FARM_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_TABLE\"]"
                  },
                  "FARM_USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_USER_TABLE\"]"
                  },
                  "FARM_DEVICE_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_DEVICE_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFarmExampleLogGroup"
            ]
          },
          "GetFarmListLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/smart-iot-app/dev/1664704480004-2022-10-02T09:54:40.004Z/smart-iot-app.zip"
              },
              "Handler": "handler.getFarmList",
              "Runtime": "nodejs14.x",
              "FunctionName": "smart-iot-app-dev-getFarmList",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "List all farms",
              "Environment": {
                "Variables": {
                  "FARM_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_TABLE\"]"
                  },
                  "FARM_USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_USER_TABLE\"]"
                  },
                  "FARM_DEVICE_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_DEVICE_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFarmListLogGroup"
            ]
          },
          "GetFarmByIDLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/smart-iot-app/dev/1664704480004-2022-10-02T09:54:40.004Z/smart-iot-app.zip"
              },
              "Handler": "handler.getFarmByID",
              "Runtime": "nodejs14.x",
              "FunctionName": "smart-iot-app-dev-getFarmByID",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Get a farm data by farm's ID",
              "Environment": {
                "Variables": {
                  "FARM_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_TABLE\"]"
                  },
                  "FARM_USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_USER_TABLE\"]"
                  },
                  "FARM_DEVICE_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_DEVICE_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetFarmByIDLogGroup"
            ]
          },
          "CreateFarmLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/smart-iot-app/dev/1664704480004-2022-10-02T09:54:40.004Z/smart-iot-app.zip"
              },
              "Handler": "handler.createFarm",
              "Runtime": "nodejs14.x",
              "FunctionName": "smart-iot-app-dev-createFarm",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Send a farm information",
              "Environment": {
                "Variables": {
                  "FARM_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_TABLE\"]"
                  },
                  "FARM_USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_USER_TABLE\"]"
                  },
                  "FARM_DEVICE_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_DEVICE_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateFarmLogGroup"
            ]
          },
          "CreateUserLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/smart-iot-app/dev/1664704480004-2022-10-02T09:54:40.004Z/smart-iot-app.zip"
              },
              "Handler": "handler.createUser",
              "Runtime": "nodejs14.x",
              "FunctionName": "smart-iot-app-dev-createUser",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Send a user information with username and list of farms",
              "Environment": {
                "Variables": {
                  "FARM_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_TABLE\"]"
                  },
                  "FARM_USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_USER_TABLE\"]"
                  },
                  "FARM_DEVICE_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_DEVICE_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserLogGroup"
            ]
          },
          "CreateUserToTableLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/smart-iot-app/dev/1664704480004-2022-10-02T09:54:40.004Z/smart-iot-app.zip"
              },
              "Handler": "handler.createUserToTable",
              "Runtime": "nodejs14.x",
              "FunctionName": "smart-iot-app-dev-createUserToTable",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Use by lambda trigger only.",
              "Environment": {
                "Variables": {
                  "FARM_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_TABLE\"]"
                  },
                  "FARM_USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_USER_TABLE\"]"
                  },
                  "FARM_DEVICE_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_DEVICE_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "CreateUserToTableLogGroup"
            ]
          },
          "GetUserListLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/smart-iot-app/dev/1664704480004-2022-10-02T09:54:40.004Z/smart-iot-app.zip"
              },
              "Handler": "handler.getUserList",
              "Runtime": "nodejs14.x",
              "FunctionName": "smart-iot-app-dev-getUserList",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Return a list of users with id",
              "Environment": {
                "Variables": {
                  "FARM_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_TABLE\"]"
                  },
                  "FARM_USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_USER_TABLE\"]"
                  },
                  "FARM_DEVICE_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_DEVICE_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserListLogGroup"
            ]
          },
          "GetUserByIDLambdaFunction": {
            "Type": "AWS::Lambda::Function",
            "Properties": {
              "Code": {
                "S3Bucket": {
                  "Ref": "ServerlessDeploymentBucket"
                },
                "S3Key": "serverless/smart-iot-app/dev/1664704480004-2022-10-02T09:54:40.004Z/smart-iot-app.zip"
              },
              "Handler": "handler.getUserByID",
              "Runtime": "nodejs14.x",
              "FunctionName": "smart-iot-app-dev-getUserByID",
              "MemorySize": 1024,
              "Timeout": 6,
              "Description": "Get a data of user by given ID",
              "Environment": {
                "Variables": {
                  "FARM_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_TABLE\"]"
                  },
                  "FARM_USER_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_USER_TABLE\"]"
                  },
                  "FARM_DEVICE_TABLE": {
                    "$ref": "$[\"service\"][\"provider\"][\"environment\"][\"FARM_DEVICE_TABLE\"]"
                  }
                }
              },
              "Role": {
                "Fn::GetAtt": [
                  "IamRoleLambdaExecution",
                  "Arn"
                ]
              }
            },
            "DependsOn": [
              "GetUserByIDLogGroup"
            ]
          },
          "GetFarmExampleLambdaVersionXbDXbyXF97sUsazpQYYNqvcHxLAdXgbwQio0h7hpnY": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFarmExampleLambdaFunction"
              },
              "CodeSha256": "P6RE6vWEGTUFLE9+o1EllgnUYOwvfZ/I2SVXTJeUdZ8="
            }
          },
          "GetFarmListLambdaVersionei7HyKaGZHOXhq47EGf63XVpNs2FQkl2O8Ni5aebZv8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFarmListLambdaFunction"
              },
              "CodeSha256": "P6RE6vWEGTUFLE9+o1EllgnUYOwvfZ/I2SVXTJeUdZ8=",
              "Description": "List all farms"
            }
          },
          "GetFarmByIDLambdaVersioncE6jP1MjSJtHVfFyyzOoN3c3yIMTtP0CiPV4SnCRl8": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetFarmByIDLambdaFunction"
              },
              "CodeSha256": "P6RE6vWEGTUFLE9+o1EllgnUYOwvfZ/I2SVXTJeUdZ8=",
              "Description": "Get a farm data by farm's ID"
            }
          },
          "CreateFarmLambdaVersionULOJFOKOX51vUsbmguXYLgZBkvZ4Cz4vmEWkWZN5wGo": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateFarmLambdaFunction"
              },
              "CodeSha256": "P6RE6vWEGTUFLE9+o1EllgnUYOwvfZ/I2SVXTJeUdZ8=",
              "Description": "Send a farm information"
            }
          },
          "CreateUserLambdaVersion27BeZBEYnmTG2GZvPyPsqe1gvBf5UNBO3pyADluyS3g": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserLambdaFunction"
              },
              "CodeSha256": "P6RE6vWEGTUFLE9+o1EllgnUYOwvfZ/I2SVXTJeUdZ8=",
              "Description": "Send a user information with username and list of farms"
            }
          },
          "CreateUserToTableLambdaVersionYY4suWgSsStUqXNAYtdknEuJ1t6PRM0TDsXZbmKqI": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "CreateUserToTableLambdaFunction"
              },
              "CodeSha256": "P6RE6vWEGTUFLE9+o1EllgnUYOwvfZ/I2SVXTJeUdZ8=",
              "Description": "Use by lambda trigger only."
            }
          },
          "GetUserListLambdaVersionhckSB9GaDcHinVFvtICNiDSWi5p1wpBY9JOwBZ5cfk": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserListLambdaFunction"
              },
              "CodeSha256": "P6RE6vWEGTUFLE9+o1EllgnUYOwvfZ/I2SVXTJeUdZ8=",
              "Description": "Return a list of users with id"
            }
          },
          "GetUserByIDLambdaVersionxWVZJcMO6xMkaWUjitp4QOcSm1uotxIxhchk4j2gzU": {
            "Type": "AWS::Lambda::Version",
            "DeletionPolicy": "Retain",
            "Properties": {
              "FunctionName": {
                "Ref": "GetUserByIDLambdaFunction"
              },
              "CodeSha256": "P6RE6vWEGTUFLE9+o1EllgnUYOwvfZ/I2SVXTJeUdZ8=",
              "Description": "Get a data of user by given ID"
            }
          },
          "ApiGatewayRestApi": {
            "Type": "AWS::ApiGateway::RestApi",
            "Properties": {
              "Name": "dev-smart-iot-app",
              "EndpointConfiguration": {
                "Types": [
                  "EDGE"
                ]
              },
              "Policy": ""
            }
          },
          "ApiGatewayResourceFarm": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "farm",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFarmGet": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFarm"
              },
              "PathPart": "get",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFarmGetExample": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFarmGet"
              },
              "PathPart": "example",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFarmGetIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFarmGet"
              },
              "PathPart": "{ID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFarmList": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFarm"
              },
              "PathPart": "list",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFarmListAll": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFarmList"
              },
              "PathPart": "all",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceFarmCreate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceFarm"
              },
              "PathPart": "create",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "user",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserCreate": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "create",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserList": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "list",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserListAll": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserList"
              },
              "PathPart": "all",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserGet": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUser"
              },
              "PathPart": "get",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceUserGetIdVar": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceUserGet"
              },
              "PathPart": "{ID}",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTrigger": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Fn::GetAtt": [
                  "ApiGatewayRestApi",
                  "RootResourceId"
                ]
              },
              "PathPart": "trigger",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayResourceTriggerCreateuser": {
            "Type": "AWS::ApiGateway::Resource",
            "Properties": {
              "ParentId": {
                "Ref": "ApiGatewayResourceTrigger"
              },
              "PathPart": "createUser",
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              }
            }
          },
          "ApiGatewayMethodFarmGetExampleGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFarmGetExample"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFarmExampleLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetFarmExampleLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFarmListAllGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFarmListAll"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFarmListLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetFarmListLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFarmGetIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFarmGetIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetFarmByIDLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetFarmByIDLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodFarmCreatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceFarmCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateFarmLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateFarmLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserCreatePost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserCreate"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateUserLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodTriggerCreateuserPost": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "POST",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceTriggerCreateuser"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "CreateUserToTableLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "CreateUserToTableLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserListAllGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserListAll"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserListLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserListLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayMethodUserGetIdVarGet": {
            "Type": "AWS::ApiGateway::Method",
            "Properties": {
              "HttpMethod": "GET",
              "RequestParameters": {},
              "ResourceId": {
                "Ref": "ApiGatewayResourceUserGetIdVar"
              },
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "ApiKeyRequired": false,
              "AuthorizationType": "NONE",
              "Integration": {
                "IntegrationHttpMethod": "POST",
                "Type": "AWS_PROXY",
                "Uri": {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":apigateway:",
                      {
                        "Ref": "AWS::Region"
                      },
                      ":lambda:path/2015-03-31/functions/",
                      {
                        "Fn::GetAtt": [
                          "GetUserByIDLambdaFunction",
                          "Arn"
                        ]
                      },
                      "/invocations"
                    ]
                  ]
                }
              },
              "MethodResponses": []
            },
            "DependsOn": [
              "GetUserByIDLambdaPermissionApiGateway"
            ]
          },
          "ApiGatewayDeployment1664704455665": {
            "Type": "AWS::ApiGateway::Deployment",
            "Properties": {
              "RestApiId": {
                "Ref": "ApiGatewayRestApi"
              },
              "StageName": "dev"
            },
            "DependsOn": [
              "ApiGatewayMethodFarmGetExampleGet",
              "ApiGatewayMethodFarmListAllGet",
              "ApiGatewayMethodFarmGetIdVarGet",
              "ApiGatewayMethodFarmCreatePost",
              "ApiGatewayMethodUserCreatePost",
              "ApiGatewayMethodTriggerCreateuserPost",
              "ApiGatewayMethodUserListAllGet",
              "ApiGatewayMethodUserGetIdVarGet"
            ]
          },
          "GetFarmExampleLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFarmExampleLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFarmListLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFarmListLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetFarmByIDLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetFarmByIDLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateFarmLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateFarmLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateUserLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "CreateUserToTableLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "CreateUserToTableLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserListLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserListLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "GetUserByIDLambdaPermissionApiGateway": {
            "Type": "AWS::Lambda::Permission",
            "Properties": {
              "FunctionName": {
                "Fn::GetAtt": [
                  "GetUserByIDLambdaFunction",
                  "Arn"
                ]
              },
              "Action": "lambda:InvokeFunction",
              "Principal": "apigateway.amazonaws.com",
              "SourceArn": {
                "Fn::Join": [
                  "",
                  [
                    "arn:",
                    {
                      "Ref": "AWS::Partition"
                    },
                    ":execute-api:",
                    {
                      "Ref": "AWS::Region"
                    },
                    ":",
                    {
                      "Ref": "AWS::AccountId"
                    },
                    ":",
                    {
                      "Ref": "ApiGatewayRestApi"
                    },
                    "/*/*"
                  ]
                ]
              }
            }
          },
          "FarmDynamoDbTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "ID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "ID",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "FarmDynamoDbTable"
            }
          },
          "FarmUserDynamoDbTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "ID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "ID",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "FarmUserDynamoDbTable"
            }
          },
          "FarmDevicesDynamoDbTable": {
            "Type": "AWS::DynamoDB::Table",
            "DeletionPolicy": "Retain",
            "Properties": {
              "AttributeDefinitions": [
                {
                  "AttributeName": "ID",
                  "AttributeType": "S"
                }
              ],
              "KeySchema": [
                {
                  "AttributeName": "ID",
                  "KeyType": "HASH"
                }
              ],
              "ProvisionedThroughput": {
                "ReadCapacityUnits": 1,
                "WriteCapacityUnits": 1
              },
              "TableName": "FarmDevicesDynamoDbTable"
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            },
            "Export": {
              "Name": "sls-smart-iot-app-dev-ServerlessDeploymentBucketName"
            }
          },
          "GetFarmExampleLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFarmExampleLambdaVersionXbDXbyXF97sUsazpQYYNqvcHxLAdXgbwQio0h7hpnY"
            },
            "Export": {
              "Name": "sls-smart-iot-app-dev-GetFarmExampleLambdaFunctionQualifiedArn"
            }
          },
          "GetFarmListLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFarmListLambdaVersionei7HyKaGZHOXhq47EGf63XVpNs2FQkl2O8Ni5aebZv8"
            },
            "Export": {
              "Name": "sls-smart-iot-app-dev-GetFarmListLambdaFunctionQualifiedArn"
            }
          },
          "GetFarmByIDLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetFarmByIDLambdaVersioncE6jP1MjSJtHVfFyyzOoN3c3yIMTtP0CiPV4SnCRl8"
            },
            "Export": {
              "Name": "sls-smart-iot-app-dev-GetFarmByIDLambdaFunctionQualifiedArn"
            }
          },
          "CreateFarmLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateFarmLambdaVersionULOJFOKOX51vUsbmguXYLgZBkvZ4Cz4vmEWkWZN5wGo"
            },
            "Export": {
              "Name": "sls-smart-iot-app-dev-CreateFarmLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserLambdaVersion27BeZBEYnmTG2GZvPyPsqe1gvBf5UNBO3pyADluyS3g"
            },
            "Export": {
              "Name": "sls-smart-iot-app-dev-CreateUserLambdaFunctionQualifiedArn"
            }
          },
          "CreateUserToTableLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "CreateUserToTableLambdaVersionYY4suWgSsStUqXNAYtdknEuJ1t6PRM0TDsXZbmKqI"
            },
            "Export": {
              "Name": "sls-smart-iot-app-dev-CreateUserToTableLambdaFunctionQualifiedArn"
            }
          },
          "GetUserListLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserListLambdaVersionhckSB9GaDcHinVFvtICNiDSWi5p1wpBY9JOwBZ5cfk"
            },
            "Export": {
              "Name": "sls-smart-iot-app-dev-GetUserListLambdaFunctionQualifiedArn"
            }
          },
          "GetUserByIDLambdaFunctionQualifiedArn": {
            "Description": "Current Lambda function version",
            "Value": {
              "Ref": "GetUserByIDLambdaVersionxWVZJcMO6xMkaWUjitp4QOcSm1uotxIxhchk4j2gzU"
            },
            "Export": {
              "Name": "sls-smart-iot-app-dev-GetUserByIDLambdaFunctionQualifiedArn"
            }
          },
          "ServiceEndpoint": {
            "Description": "URL of the service endpoint",
            "Value": {
              "Fn::Join": [
                "",
                [
                  "https://",
                  {
                    "Ref": "ApiGatewayRestApi"
                  },
                  ".execute-api.",
                  {
                    "Ref": "AWS::Region"
                  },
                  ".",
                  {
                    "Ref": "AWS::URLSuffix"
                  },
                  "/dev"
                ]
              ]
            },
            "Export": {
              "Name": "sls-smart-iot-app-dev-ServiceEndpoint"
            }
          }
        }
      },
      "coreCloudFormationTemplate": {
        "AWSTemplateFormatVersion": "2010-09-09",
        "Description": "The AWS CloudFormation template for this Serverless application",
        "Resources": {
          "ServerlessDeploymentBucket": {
            "Type": "AWS::S3::Bucket",
            "Properties": {
              "BucketEncryption": {
                "ServerSideEncryptionConfiguration": [
                  {
                    "ServerSideEncryptionByDefault": {
                      "SSEAlgorithm": "AES256"
                    }
                  }
                ]
              }
            }
          },
          "ServerlessDeploymentBucketPolicy": {
            "Type": "AWS::S3::BucketPolicy",
            "Properties": {
              "Bucket": {
                "Ref": "ServerlessDeploymentBucket"
              },
              "PolicyDocument": {
                "Statement": [
                  {
                    "Action": "s3:*",
                    "Effect": "Deny",
                    "Principal": "*",
                    "Resource": [
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            },
                            "/*"
                          ]
                        ]
                      },
                      {
                        "Fn::Join": [
                          "",
                          [
                            "arn:",
                            {
                              "Ref": "AWS::Partition"
                            },
                            ":s3:::",
                            {
                              "Ref": "ServerlessDeploymentBucket"
                            }
                          ]
                        ]
                      }
                    ],
                    "Condition": {
                      "Bool": {
                        "aws:SecureTransport": false
                      }
                    }
                  }
                ]
              }
            }
          }
        },
        "Outputs": {
          "ServerlessDeploymentBucketName": {
            "Value": {
              "Ref": "ServerlessDeploymentBucket"
            }
          }
        }
      },
      "vpc": {}
    },
    "pluginsData": {},
    "functions": {
      "getFarmExample": {
        "handler": "handler.getFarmExample",
        "events": [
          {
            "http": {
              "path": "farm/get/example",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "smart-iot-app-dev-getFarmExample",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetFarmExampleLambdaVersionXbDXbyXF97sUsazpQYYNqvcHxLAdXgbwQio0h7hpnY"
      },
      "getFarmList": {
        "handler": "handler.getFarmList",
        "description": "List all farms",
        "events": [
          {
            "http": {
              "path": "farm/list/all",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "smart-iot-app-dev-getFarmList",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetFarmListLambdaVersionei7HyKaGZHOXhq47EGf63XVpNs2FQkl2O8Ni5aebZv8"
      },
      "getFarmByID": {
        "handler": "handler.getFarmByID",
        "description": "Get a farm data by farm's ID",
        "events": [
          {
            "http": {
              "path": "farm/get/{ID}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "smart-iot-app-dev-getFarmByID",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetFarmByIDLambdaVersioncE6jP1MjSJtHVfFyyzOoN3c3yIMTtP0CiPV4SnCRl8"
      },
      "createFarm": {
        "handler": "handler.createFarm",
        "description": "Send a farm information",
        "events": [
          {
            "http": {
              "path": "farm/create",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "smart-iot-app-dev-createFarm",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateFarmLambdaVersionULOJFOKOX51vUsbmguXYLgZBkvZ4Cz4vmEWkWZN5wGo"
      },
      "createUser": {
        "handler": "handler.createUser",
        "description": "Send a user information with username and list of farms",
        "events": [
          {
            "http": {
              "path": "user/create",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "smart-iot-app-dev-createUser",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateUserLambdaVersion27BeZBEYnmTG2GZvPyPsqe1gvBf5UNBO3pyADluyS3g"
      },
      "createUserToTable": {
        "handler": "handler.createUserToTable",
        "description": "Use by lambda trigger only.",
        "events": [
          {
            "http": {
              "path": "trigger/createUser",
              "method": "post",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "smart-iot-app-dev-createUserToTable",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "CreateUserToTableLambdaVersionYY4suWgSsStUqXNAYtdknEuJ1t6PRM0TDsXZbmKqI"
      },
      "getUserList": {
        "handler": "handler.getUserList",
        "description": "Return a list of users with id",
        "events": [
          {
            "http": {
              "path": "user/list/all",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "smart-iot-app-dev-getUserList",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUserListLambdaVersionhckSB9GaDcHinVFvtICNiDSWi5p1wpBY9JOwBZ5cfk"
      },
      "getUserByID": {
        "handler": "handler.getUserByID",
        "description": "Get a data of user by given ID",
        "events": [
          {
            "http": {
              "path": "user/get/{ID}",
              "method": "get",
              "integration": "AWS_PROXY"
            }
          }
        ],
        "name": "smart-iot-app-dev-getUserByID",
        "package": {},
        "memory": 1024,
        "timeout": 6,
        "runtime": "nodejs14.x",
        "vpc": {},
        "versionLogicalId": "GetUserByIDLambdaVersionxWVZJcMO6xMkaWUjitp4QOcSm1uotxIxhchk4j2gzU"
      }
    },
    "resources": {
      "Resources": {
        "FarmDynamoDbTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "ID",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "ID",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "FarmDynamoDbTable"
          }
        },
        "FarmUserDynamoDbTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "ID",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "ID",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "FarmUserDynamoDbTable"
          }
        },
        "FarmDevicesDynamoDbTable": {
          "Type": "AWS::DynamoDB::Table",
          "DeletionPolicy": "Retain",
          "Properties": {
            "AttributeDefinitions": [
              {
                "AttributeName": "ID",
                "AttributeType": "S"
              }
            ],
            "KeySchema": [
              {
                "AttributeName": "ID",
                "KeyType": "HASH"
              }
            ],
            "ProvisionedThroughput": {
              "ReadCapacityUnits": 1,
              "WriteCapacityUnits": 1
            },
            "TableName": "FarmDevicesDynamoDbTable"
          }
        }
      },
      "Outputs": {}
    },
    "configValidationMode": "warn",
    "serviceFilename": "serverless.yml",
    "initialServerlessConfig": {
      "service": {
        "$ref": "$[\"service\"][\"serviceObject\"]"
      },
      "frameworkVersion": "2",
      "provider": {
        "$ref": "$[\"service\"][\"provider\"]"
      },
      "package": {
        "patterns": [
          "!**",
          "handler.js",
          "node_modules/uuid",
          "node_modules/bluebird"
        ],
        "artifact": "E:\\MobileAndroidApp\\smart_iot_app\\.serverless\\smart-iot-app.zip",
        "artifactDirectoryName": "serverless/smart-iot-app/dev/1664704480004-2022-10-02T09:54:40.004Z"
      },
      "functions": {
        "$ref": "$[\"service\"][\"functions\"]"
      },
      "resources": {
        "$ref": "$[\"service\"][\"resources\"]"
      }
    },
    "layers": {},
    "isDashboardMonitoringPreconfigured": false,
    "artifact": "E:\\MobileAndroidApp\\smart_iot_app\\.serverless\\smart-iot-app.zip"
  },
  "package": {
    "artifactDirectoryName": "serverless/smart-iot-app/dev/1664704480004-2022-10-02T09:54:40.004Z",
    "artifact": "smart-iot-app.zip"
  }
}