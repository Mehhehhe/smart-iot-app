{
  "AWSTemplateFormatVersion": "2010-09-09",
  "Description": "The AWS CloudFormation template for this Serverless application",
  "Resources": {
    "ServerlessDeploymentBucket": {
      "Type": "AWS::S3::Bucket",
      "Properties": {
        "BucketEncryption": {
          "ServerSideEncryptionConfiguration": [
            {
              "ServerSideEncryptionByDefault": {
                "SSEAlgorithm": "AES256"
              }
            }
          ]
        }
      }
    },
    "ServerlessDeploymentBucketPolicy": {
      "Type": "AWS::S3::BucketPolicy",
      "Properties": {
        "Bucket": {
          "Ref": "ServerlessDeploymentBucket"
        },
        "PolicyDocument": {
          "Statement": [
            {
              "Action": "s3:*",
              "Effect": "Deny",
              "Principal": "*",
              "Resource": [
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      },
                      "/*"
                    ]
                  ]
                },
                {
                  "Fn::Join": [
                    "",
                    [
                      "arn:",
                      {
                        "Ref": "AWS::Partition"
                      },
                      ":s3:::",
                      {
                        "Ref": "ServerlessDeploymentBucket"
                      }
                    ]
                  ]
                }
              ],
              "Condition": {
                "Bool": {
                  "aws:SecureTransport": false
                }
              }
            }
          ]
        }
      }
    },
    "GetFarmExampleLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/smart-iot-app-dev-getFarmExample"
      }
    },
    "GetFarmListLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/smart-iot-app-dev-getFarmList"
      }
    },
    "GetFarmByIDLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/smart-iot-app-dev-getFarmByID"
      }
    },
    "CreateFarmLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/smart-iot-app-dev-createFarm"
      }
    },
    "CreateUserLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/smart-iot-app-dev-createUser"
      }
    },
    "CreateUserToTableLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/smart-iot-app-dev-createUserToTable"
      }
    },
    "GetUserListLogGroup": {
      "Type": "AWS::Logs::LogGroup",
      "Properties": {
        "LogGroupName": "/aws/lambda/smart-iot-app-dev-getUserList"
      }
    },
    "IamRoleLambdaExecution": {
      "Type": "AWS::IAM::Role",
      "Properties": {
        "AssumeRolePolicyDocument": {
          "Version": "2012-10-17",
          "Statement": [
            {
              "Effect": "Allow",
              "Principal": {
                "Service": [
                  "lambda.amazonaws.com"
                ]
              },
              "Action": [
                "sts:AssumeRole"
              ]
            }
          ]
        },
        "Policies": [
          {
            "PolicyName": {
              "Fn::Join": [
                "-",
                [
                  "smart-iot-app",
                  "dev",
                  "lambda"
                ]
              ]
            },
            "PolicyDocument": {
              "Version": "2012-10-17",
              "Statement": [
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:CreateLogStream",
                    "logs:CreateLogGroup"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/smart-iot-app-dev*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "logs:PutLogEvents"
                  ],
                  "Resource": [
                    {
                      "Fn::Sub": "arn:${AWS::Partition}:logs:${AWS::Region}:${AWS::AccountId}:log-group:/aws/lambda/smart-iot-app-dev*:*:*"
                    }
                  ]
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:ListBucket"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "ServerlessDeploymentBucket"
                        }
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "s3:PutObject"
                  ],
                  "Resource": {
                    "Fn::Join": [
                      "",
                      [
                        "arn:aws:s3:::",
                        {
                          "Ref": "ServerlessDeploymentBucket"
                        },
                        "/*"
                      ]
                    ]
                  }
                },
                {
                  "Effect": "Allow",
                  "Action": [
                    "dynamodb:Query",
                    "dynamodb:Scan",
                    "dynamodb:GetItem",
                    "dynamodb:PutItem"
                  ],
                  "Resource": [
                    {
                      "Fn::GetAtt": [
                        "FarmDynamoDbTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "FarmUserDynamoDbTable",
                        "Arn"
                      ]
                    },
                    {
                      "Fn::GetAtt": [
                        "FarmDevicesDynamoDbTable",
                        "Arn"
                      ]
                    }
                  ]
                }
              ]
            }
          }
        ],
        "Path": "/",
        "RoleName": {
          "Fn::Join": [
            "-",
            [
              "smart-iot-app",
              "dev",
              {
                "Ref": "AWS::Region"
              },
              "lambdaRole"
            ]
          ]
        }
      }
    },
    "GetFarmExampleLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/smart-iot-app/dev/1664633370200-2022-10-01T14:09:30.200Z/smart-iot-app.zip"
        },
        "Handler": "handler.getFarmExample",
        "Runtime": "nodejs14.x",
        "FunctionName": "smart-iot-app-dev-getFarmExample",
        "MemorySize": 1024,
        "Timeout": 6,
        "Environment": {
          "Variables": {
            "FARM_TABLE": {
              "Ref": "FarmDynamoDbTable"
            },
            "FARM_USER_TABLE": {
              "Ref": "FarmUserDynamoDbTable"
            },
            "FARM_DEVICE_TABLE": {
              "Ref": "FarmDevicesDynamoDbTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetFarmExampleLogGroup"
      ]
    },
    "GetFarmListLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/smart-iot-app/dev/1664633370200-2022-10-01T14:09:30.200Z/smart-iot-app.zip"
        },
        "Handler": "handler.getFarmList",
        "Runtime": "nodejs14.x",
        "FunctionName": "smart-iot-app-dev-getFarmList",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "List all farms",
        "Environment": {
          "Variables": {
            "FARM_TABLE": {
              "Ref": "FarmDynamoDbTable"
            },
            "FARM_USER_TABLE": {
              "Ref": "FarmUserDynamoDbTable"
            },
            "FARM_DEVICE_TABLE": {
              "Ref": "FarmDevicesDynamoDbTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetFarmListLogGroup"
      ]
    },
    "GetFarmByIDLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/smart-iot-app/dev/1664633370200-2022-10-01T14:09:30.200Z/smart-iot-app.zip"
        },
        "Handler": "handler.getFarmByID",
        "Runtime": "nodejs14.x",
        "FunctionName": "smart-iot-app-dev-getFarmByID",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Get a farm data by farm's ID",
        "Environment": {
          "Variables": {
            "FARM_TABLE": {
              "Ref": "FarmDynamoDbTable"
            },
            "FARM_USER_TABLE": {
              "Ref": "FarmUserDynamoDbTable"
            },
            "FARM_DEVICE_TABLE": {
              "Ref": "FarmDevicesDynamoDbTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetFarmByIDLogGroup"
      ]
    },
    "CreateFarmLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/smart-iot-app/dev/1664633370200-2022-10-01T14:09:30.200Z/smart-iot-app.zip"
        },
        "Handler": "handler.createFarm",
        "Runtime": "nodejs14.x",
        "FunctionName": "smart-iot-app-dev-createFarm",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Send a farm information",
        "Environment": {
          "Variables": {
            "FARM_TABLE": {
              "Ref": "FarmDynamoDbTable"
            },
            "FARM_USER_TABLE": {
              "Ref": "FarmUserDynamoDbTable"
            },
            "FARM_DEVICE_TABLE": {
              "Ref": "FarmDevicesDynamoDbTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateFarmLogGroup"
      ]
    },
    "CreateUserLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/smart-iot-app/dev/1664633370200-2022-10-01T14:09:30.200Z/smart-iot-app.zip"
        },
        "Handler": "handler.createUser",
        "Runtime": "nodejs14.x",
        "FunctionName": "smart-iot-app-dev-createUser",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Send a user information with username and list of farms",
        "Environment": {
          "Variables": {
            "FARM_TABLE": {
              "Ref": "FarmDynamoDbTable"
            },
            "FARM_USER_TABLE": {
              "Ref": "FarmUserDynamoDbTable"
            },
            "FARM_DEVICE_TABLE": {
              "Ref": "FarmDevicesDynamoDbTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateUserLogGroup"
      ]
    },
    "CreateUserToTableLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/smart-iot-app/dev/1664633370200-2022-10-01T14:09:30.200Z/smart-iot-app.zip"
        },
        "Handler": "handler.createUserToTable",
        "Runtime": "nodejs14.x",
        "FunctionName": "smart-iot-app-dev-createUserToTable",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Use by lambda trigger only.",
        "Environment": {
          "Variables": {
            "FARM_TABLE": {
              "Ref": "FarmDynamoDbTable"
            },
            "FARM_USER_TABLE": {
              "Ref": "FarmUserDynamoDbTable"
            },
            "FARM_DEVICE_TABLE": {
              "Ref": "FarmDevicesDynamoDbTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "CreateUserToTableLogGroup"
      ]
    },
    "GetUserListLambdaFunction": {
      "Type": "AWS::Lambda::Function",
      "Properties": {
        "Code": {
          "S3Bucket": {
            "Ref": "ServerlessDeploymentBucket"
          },
          "S3Key": "serverless/smart-iot-app/dev/1664633370200-2022-10-01T14:09:30.200Z/smart-iot-app.zip"
        },
        "Handler": "handler.getUserList",
        "Runtime": "nodejs14.x",
        "FunctionName": "smart-iot-app-dev-getUserList",
        "MemorySize": 1024,
        "Timeout": 6,
        "Description": "Return a list of users with id",
        "Environment": {
          "Variables": {
            "FARM_TABLE": {
              "Ref": "FarmDynamoDbTable"
            },
            "FARM_USER_TABLE": {
              "Ref": "FarmUserDynamoDbTable"
            },
            "FARM_DEVICE_TABLE": {
              "Ref": "FarmDevicesDynamoDbTable"
            }
          }
        },
        "Role": {
          "Fn::GetAtt": [
            "IamRoleLambdaExecution",
            "Arn"
          ]
        }
      },
      "DependsOn": [
        "GetUserListLogGroup"
      ]
    },
    "GetFarmExampleLambdaVersionj2yisA4OfOyNACiVjY0uv2exWpYPt8gCuKG1PGErXQ": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFarmExampleLambdaFunction"
        },
        "CodeSha256": "pTY7WmvnTW25OqRkBJxcwoxULXS9ljhRx+6i+tumi7c="
      }
    },
    "GetFarmListLambdaVersion3QdaFOtZiJQCFiEK7koy2NRu3VXqMTh37HqdQolew": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFarmListLambdaFunction"
        },
        "CodeSha256": "pTY7WmvnTW25OqRkBJxcwoxULXS9ljhRx+6i+tumi7c=",
        "Description": "List all farms"
      }
    },
    "GetFarmByIDLambdaVersionx6sDch86DK59stAvlkKW5wzZ9hOu9ooQqE85tfTvUY": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetFarmByIDLambdaFunction"
        },
        "CodeSha256": "pTY7WmvnTW25OqRkBJxcwoxULXS9ljhRx+6i+tumi7c=",
        "Description": "Get a farm data by farm's ID"
      }
    },
    "CreateFarmLambdaVersionmd2IAROSkqjhXkLCQ6l1ftgQzVAjiA3DX598iAa7E": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateFarmLambdaFunction"
        },
        "CodeSha256": "pTY7WmvnTW25OqRkBJxcwoxULXS9ljhRx+6i+tumi7c=",
        "Description": "Send a farm information"
      }
    },
    "CreateUserLambdaVersionZh8vAa6nCc9dnWw6ieaB1cRiDbgmoDvAy0GttSRTNeg": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateUserLambdaFunction"
        },
        "CodeSha256": "pTY7WmvnTW25OqRkBJxcwoxULXS9ljhRx+6i+tumi7c=",
        "Description": "Send a user information with username and list of farms"
      }
    },
    "CreateUserToTableLambdaVersionGTRAmuTildQ9vqJ1cPGHuYDQiXAQf5MP1oV9pRTt0": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "CreateUserToTableLambdaFunction"
        },
        "CodeSha256": "pTY7WmvnTW25OqRkBJxcwoxULXS9ljhRx+6i+tumi7c=",
        "Description": "Use by lambda trigger only."
      }
    },
    "GetUserListLambdaVersionCOf0E4cd1r8opl6MhvrRQlfH9Dil5BCxsFVcsUMs": {
      "Type": "AWS::Lambda::Version",
      "DeletionPolicy": "Retain",
      "Properties": {
        "FunctionName": {
          "Ref": "GetUserListLambdaFunction"
        },
        "CodeSha256": "pTY7WmvnTW25OqRkBJxcwoxULXS9ljhRx+6i+tumi7c=",
        "Description": "Return a list of users with id"
      }
    },
    "ApiGatewayRestApi": {
      "Type": "AWS::ApiGateway::RestApi",
      "Properties": {
        "Name": "dev-smart-iot-app",
        "EndpointConfiguration": {
          "Types": [
            "EDGE"
          ]
        },
        "Policy": ""
      }
    },
    "ApiGatewayResourceFarm": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "farm",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFarmGet": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFarm"
        },
        "PathPart": "get",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFarmGetExample": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFarmGet"
        },
        "PathPart": "example",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFarmGetIdVar": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFarmGet"
        },
        "PathPart": "{ID}",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFarmList": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFarm"
        },
        "PathPart": "list",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFarmListAll": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFarmList"
        },
        "PathPart": "all",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceFarmCreate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceFarm"
        },
        "PathPart": "create",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "user",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserCreate": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "create",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserList": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUser"
        },
        "PathPart": "list",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceUserListAll": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceUserList"
        },
        "PathPart": "all",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTrigger": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Fn::GetAtt": [
            "ApiGatewayRestApi",
            "RootResourceId"
          ]
        },
        "PathPart": "trigger",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayResourceTriggerCreateuser": {
      "Type": "AWS::ApiGateway::Resource",
      "Properties": {
        "ParentId": {
          "Ref": "ApiGatewayResourceTrigger"
        },
        "PathPart": "createUser",
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        }
      }
    },
    "ApiGatewayMethodFarmGetExampleGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFarmGetExample"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetFarmExampleLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetFarmExampleLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFarmListAllGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFarmListAll"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetFarmListLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetFarmListLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFarmGetIdVarGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFarmGetIdVar"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetFarmByIDLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetFarmByIDLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodFarmCreatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceFarmCreate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateFarmLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateFarmLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserCreatePost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserCreate"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateUserLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateUserLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodTriggerCreateuserPost": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "POST",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceTriggerCreateuser"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "CreateUserToTableLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "CreateUserToTableLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayMethodUserListAllGet": {
      "Type": "AWS::ApiGateway::Method",
      "Properties": {
        "HttpMethod": "GET",
        "RequestParameters": {},
        "ResourceId": {
          "Ref": "ApiGatewayResourceUserListAll"
        },
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "ApiKeyRequired": false,
        "AuthorizationType": "NONE",
        "Integration": {
          "IntegrationHttpMethod": "POST",
          "Type": "AWS_PROXY",
          "Uri": {
            "Fn::Join": [
              "",
              [
                "arn:",
                {
                  "Ref": "AWS::Partition"
                },
                ":apigateway:",
                {
                  "Ref": "AWS::Region"
                },
                ":lambda:path/2015-03-31/functions/",
                {
                  "Fn::GetAtt": [
                    "GetUserListLambdaFunction",
                    "Arn"
                  ]
                },
                "/invocations"
              ]
            ]
          }
        },
        "MethodResponses": []
      },
      "DependsOn": [
        "GetUserListLambdaPermissionApiGateway"
      ]
    },
    "ApiGatewayDeployment1664633363435": {
      "Type": "AWS::ApiGateway::Deployment",
      "Properties": {
        "RestApiId": {
          "Ref": "ApiGatewayRestApi"
        },
        "StageName": "dev"
      },
      "DependsOn": [
        "ApiGatewayMethodFarmGetExampleGet",
        "ApiGatewayMethodFarmListAllGet",
        "ApiGatewayMethodFarmGetIdVarGet",
        "ApiGatewayMethodFarmCreatePost",
        "ApiGatewayMethodUserCreatePost",
        "ApiGatewayMethodTriggerCreateuserPost",
        "ApiGatewayMethodUserListAllGet"
      ]
    },
    "GetFarmExampleLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFarmExampleLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetFarmListLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFarmListLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetFarmByIDLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetFarmByIDLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateFarmLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateFarmLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateUserLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateUserLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "CreateUserToTableLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "CreateUserToTableLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "GetUserListLambdaPermissionApiGateway": {
      "Type": "AWS::Lambda::Permission",
      "Properties": {
        "FunctionName": {
          "Fn::GetAtt": [
            "GetUserListLambdaFunction",
            "Arn"
          ]
        },
        "Action": "lambda:InvokeFunction",
        "Principal": "apigateway.amazonaws.com",
        "SourceArn": {
          "Fn::Join": [
            "",
            [
              "arn:",
              {
                "Ref": "AWS::Partition"
              },
              ":execute-api:",
              {
                "Ref": "AWS::Region"
              },
              ":",
              {
                "Ref": "AWS::AccountId"
              },
              ":",
              {
                "Ref": "ApiGatewayRestApi"
              },
              "/*/*"
            ]
          ]
        }
      }
    },
    "FarmDynamoDbTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "ID",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "ID",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "FarmDynamoDbTable"
      }
    },
    "FarmUserDynamoDbTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "ID",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "ID",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "FarmUserDynamoDbTable"
      }
    },
    "FarmDevicesDynamoDbTable": {
      "Type": "AWS::DynamoDB::Table",
      "DeletionPolicy": "Retain",
      "Properties": {
        "AttributeDefinitions": [
          {
            "AttributeName": "ID",
            "AttributeType": "S"
          }
        ],
        "KeySchema": [
          {
            "AttributeName": "ID",
            "KeyType": "HASH"
          }
        ],
        "ProvisionedThroughput": {
          "ReadCapacityUnits": 1,
          "WriteCapacityUnits": 1
        },
        "TableName": "FarmDevicesDynamoDbTable"
      }
    }
  },
  "Outputs": {
    "ServerlessDeploymentBucketName": {
      "Value": {
        "Ref": "ServerlessDeploymentBucket"
      },
      "Export": {
        "Name": "sls-smart-iot-app-dev-ServerlessDeploymentBucketName"
      }
    },
    "GetFarmExampleLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFarmExampleLambdaVersionj2yisA4OfOyNACiVjY0uv2exWpYPt8gCuKG1PGErXQ"
      },
      "Export": {
        "Name": "sls-smart-iot-app-dev-GetFarmExampleLambdaFunctionQualifiedArn"
      }
    },
    "GetFarmListLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFarmListLambdaVersion3QdaFOtZiJQCFiEK7koy2NRu3VXqMTh37HqdQolew"
      },
      "Export": {
        "Name": "sls-smart-iot-app-dev-GetFarmListLambdaFunctionQualifiedArn"
      }
    },
    "GetFarmByIDLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetFarmByIDLambdaVersionx6sDch86DK59stAvlkKW5wzZ9hOu9ooQqE85tfTvUY"
      },
      "Export": {
        "Name": "sls-smart-iot-app-dev-GetFarmByIDLambdaFunctionQualifiedArn"
      }
    },
    "CreateFarmLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateFarmLambdaVersionmd2IAROSkqjhXkLCQ6l1ftgQzVAjiA3DX598iAa7E"
      },
      "Export": {
        "Name": "sls-smart-iot-app-dev-CreateFarmLambdaFunctionQualifiedArn"
      }
    },
    "CreateUserLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateUserLambdaVersionZh8vAa6nCc9dnWw6ieaB1cRiDbgmoDvAy0GttSRTNeg"
      },
      "Export": {
        "Name": "sls-smart-iot-app-dev-CreateUserLambdaFunctionQualifiedArn"
      }
    },
    "CreateUserToTableLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "CreateUserToTableLambdaVersionGTRAmuTildQ9vqJ1cPGHuYDQiXAQf5MP1oV9pRTt0"
      },
      "Export": {
        "Name": "sls-smart-iot-app-dev-CreateUserToTableLambdaFunctionQualifiedArn"
      }
    },
    "GetUserListLambdaFunctionQualifiedArn": {
      "Description": "Current Lambda function version",
      "Value": {
        "Ref": "GetUserListLambdaVersionCOf0E4cd1r8opl6MhvrRQlfH9Dil5BCxsFVcsUMs"
      },
      "Export": {
        "Name": "sls-smart-iot-app-dev-GetUserListLambdaFunctionQualifiedArn"
      }
    },
    "ServiceEndpoint": {
      "Description": "URL of the service endpoint",
      "Value": {
        "Fn::Join": [
          "",
          [
            "https://",
            {
              "Ref": "ApiGatewayRestApi"
            },
            ".execute-api.",
            {
              "Ref": "AWS::Region"
            },
            ".",
            {
              "Ref": "AWS::URLSuffix"
            },
            "/dev"
          ]
        ]
      },
      "Export": {
        "Name": "sls-smart-iot-app-dev-ServiceEndpoint"
      }
    }
  }
}